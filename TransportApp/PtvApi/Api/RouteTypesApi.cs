/* 
 * PTV Timetable API - Version 3
 *
 * The PTV Timetable API provides direct access to Public Transport Victoriaâ€™s public transport timetable data.    The API returns scheduled timetable, route and stop data for all metropolitan and regional train, tram and bus services in Victoria, including Night Network(Night Train and Night Tram data are included in metropolitan train and tram services data, respectively, whereas Night Bus is a separate route type).    The API also returns real-time data for metropolitan train, tram and bus services (where this data is made available to PTV), as well as disruption information, stop facility information, and access to myki ticket outlet data.    This Swagger is for Version 3 of the PTV Timetable API. By using this documentation you agree to comply with the licence and terms of service.    Train timetable data is updated daily, while the remaining data is updated weekly, taking into account any planned timetable changes (for example, due to holidays or planned disruptions). The PTV timetable API is the same API used by PTV for its apps. To access the most up to date data PTV has (including real-time data) you must use the API dynamically.    You can access the PTV Timetable API through a HTTP or HTTPS interface, as follows:        base URL / version number / API name / query string  The base URL is either:    *  http://timetableapi.ptv.vic.gov.au  or    *  https://timetableapi.ptv.vic.gov.au    The Swagger JSON file is available at http://timetableapi.ptv.vic.gov.au/swagger/docs/v3    Frequently asked questions are available on the PTV website at http://ptv.vic.gov.au/apifaq    Links to the following information are also provided on the PTV website at http://ptv.vic.gov.au/ptv-timetable-api/  * How to register for an API key and calculate a signature  * PTV Timetable API V2 to V3 Migration Guide  * Documentation for Version 2 of the PTV Timetable API  * PTV Timetable API Data Quality Statement    All information about how to use the API is in this documentation. PTV cannot provide technical support for the API.  
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TransportApp.PTVApi.Client;
using TransportApp.PTVApi.Model;

namespace TransportApp.PTVApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRouteTypesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// View all route types and their names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TransportApp.PTVApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>V3RouteTypesResponse</returns>
        V3RouteTypesResponse RouteTypesGetRouteTypes (string token = null, string devid = null, string signature = null);

        /// <summary>
        /// View all route types and their names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TransportApp.PTVApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>ApiResponse of V3RouteTypesResponse</returns>
        ApiResponse<V3RouteTypesResponse> RouteTypesGetRouteTypesWithHttpInfo (string token = null, string devid = null, string signature = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// View all route types and their names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TransportApp.PTVApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>Task of V3RouteTypesResponse</returns>
        System.Threading.Tasks.Task<V3RouteTypesResponse> RouteTypesGetRouteTypesAsync (string token = null, string devid = null, string signature = null);

        /// <summary>
        /// View all route types and their names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TransportApp.PTVApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>Task of ApiResponse (V3RouteTypesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<V3RouteTypesResponse>> RouteTypesGetRouteTypesAsyncWithHttpInfo (string token = null, string devid = null, string signature = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RouteTypesApi : IRouteTypesApi
    {
        private TransportApp.PTVApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RouteTypesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RouteTypesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = TransportApp.PTVApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RouteTypesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RouteTypesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TransportApp.PTVApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TransportApp.PTVApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// View all route types and their names 
        /// </summary>
        /// <exception cref="TransportApp.PTVApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>V3RouteTypesResponse</returns>
        public V3RouteTypesResponse RouteTypesGetRouteTypes (string token = null, string devid = null, string signature = null)
        {
             ApiResponse<V3RouteTypesResponse> localVarResponse = RouteTypesGetRouteTypesWithHttpInfo(token, devid, signature);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View all route types and their names 
        /// </summary>
        /// <exception cref="TransportApp.PTVApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>ApiResponse of V3RouteTypesResponse</returns>
        public ApiResponse< V3RouteTypesResponse > RouteTypesGetRouteTypesWithHttpInfo (string token = null, string devid = null, string signature = null)
        {

            var localVarPath = "/v3/route_types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (devid != null) localVarQueryParams.Add("devid", Configuration.ApiClient.ParameterToString(devid)); // query parameter
            if (signature != null) localVarQueryParams.Add("signature", Configuration.ApiClient.ParameterToString(signature)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RouteTypesGetRouteTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V3RouteTypesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V3RouteTypesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V3RouteTypesResponse)));
            
        }

        /// <summary>
        /// View all route types and their names 
        /// </summary>
        /// <exception cref="TransportApp.PTVApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>Task of V3RouteTypesResponse</returns>
        public async System.Threading.Tasks.Task<V3RouteTypesResponse> RouteTypesGetRouteTypesAsync (string token = null, string devid = null, string signature = null)
        {
             ApiResponse<V3RouteTypesResponse> localVarResponse = await RouteTypesGetRouteTypesAsyncWithHttpInfo(token, devid, signature);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View all route types and their names 
        /// </summary>
        /// <exception cref="TransportApp.PTVApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Please ignore (optional)</param>
        /// <param name="devid">Your developer id (optional)</param>
        /// <param name="signature">Authentication signature for request (optional)</param>
        /// <returns>Task of ApiResponse (V3RouteTypesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V3RouteTypesResponse>> RouteTypesGetRouteTypesAsyncWithHttpInfo (string token = null, string devid = null, string signature = null)
        {

            var localVarPath = "/v3/route_types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (token != null) localVarQueryParams.Add("token", Configuration.ApiClient.ParameterToString(token)); // query parameter
            if (devid != null) localVarQueryParams.Add("devid", Configuration.ApiClient.ParameterToString(devid)); // query parameter
            if (signature != null) localVarQueryParams.Add("signature", Configuration.ApiClient.ParameterToString(signature)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RouteTypesGetRouteTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V3RouteTypesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V3RouteTypesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V3RouteTypesResponse)));
            
        }

    }
}
